# This workflow will test a .NET project
name: Test .NET Workflow

on:
  workflow_call:

env:
  DOTNET_NOLOGO: "true"
  MIGRATIONSDK_BUILD_DOCS: "no"
  MIGRATIONSDK_SKIP_GITHUB_RUNNER_TESTS: ${{ vars.MIGRATIONSDK_SKIP_GITHUB_RUNNER_TESTS }}
  MIGRATIONSDK_SKIP_FLAKY_TESTS: ${{ vars.MIGRATIONSDK_SKIP_FLAKY_TESTS }}
  MIGRATIONSDK_TEST_CANCELLATION_TIMEOUT_TIMESPAN: ${{ vars.MIGRATIONSDK_TEST_CANCELLATION_TIMEOUT_TIMESPAN }}

jobs:
  test-dotnet:
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(vars.BUILD_OS) }}
        config: ${{ fromJSON(vars.BUILD_CONFIGURATIONS) }}

    runs-on: ${{ matrix.os }}
    name: Test .NET (${{ matrix.os }} ${{ matrix.config }})
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Setup .NET environment
      - uses: ./.github/actions/setup-dotnet

      # Cache NuGet packages based on the lock file
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Restore dependencies
      - name: Restore Dependencies
        run: dotnet restore '${{ vars.BUILD_SOLUTION }}' --locked-mode

      # Restore Tools (i.e. report generator)
      - name: Restore .NET Tools
        run: dotnet tool restore

      # Download built binaries
      - name: Download Build Output
        uses: actions/download-artifact@v4
        with:
          name: build-output-${{ matrix.config }}
          path: ./

      # Test the solution
      - name: Test Solution with ${{ matrix.config }} Configuration
        run: |
          dotnet test '${{ vars.BUILD_SOLUTION }}' --no-build --no-restore -c ${{ matrix.config }} --verbosity normal --collect:"XPlat Code Coverage" --logger junit --results-directory "TestResults-${{ matrix.os }}-${{ matrix.config }}" -- RunConfiguration.TestSessionTimeout=${{ vars.MIGRATIONSDK_TEST_CANCELLATION_TIMEOUT_MILLISECONDS }}

      # Build code coverage reports
      - name: Build Coverage Summary
        run: dotnet reportgenerator -reports:"TestResults-${{ matrix.os }}-${{ matrix.config }}/*/coverage.cobertura.xml" -targetdir:"TestResults-${{ matrix.os }}-${{ matrix.config }}/coverage-reports" -reporttypes:"Html;MarkdownSummaryGithub"

      # Create job summary
      - name: Set Job Summary
        run: cat "TestResults-${{ matrix.os }}-${{ matrix.config }}/coverage-reports/SummaryGithub.md" >> $GITHUB_STEP_SUMMARY
        shell: bash

      # Upload test results
      - name: Upload Test Results
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-results-${{ matrix.os }}-${{ matrix.config }}
          path: TestResults-${{ matrix.os }}-${{ matrix.config }}
          if-no-files-found: error
