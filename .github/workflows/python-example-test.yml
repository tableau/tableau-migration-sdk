name: Python Test

on:
    workflow_call:

env:
    MIG_SDK_PYTHON_BUILD: ${{ vars.MIG_SDK_PYTHON_BUILD }}

defaults:
    run:
        working-directory: ./tests/Python.ExampleApplication.Tests

jobs:
    test:
        strategy:
            fail-fast: false
            matrix:
                os: ${{ fromJSON(vars.BUILD_OS) }}
                config: ${{ fromJSON(vars.BUILD_CONFIGURATIONS) }}
        runs-on: ${{ matrix.os }}
        name: Test on ${{ matrix.os }}, ${{ matrix.config }}
        steps:
            # Checkout the repository
            - uses: actions/checkout@v4
            
            # Setup .NET environment
            - uses: ./.github/actions/setup-dotnet
            
            # Restore Tools (i.e. report generator)
            - name: Restore .NET Tools
              run: dotnet tool restore

            # Setup Python environment
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ vars.PYTHON_TEST_VERSIONS }}
                  cache: 'pip' # caching pip dependencies
            
            # Install dependencies
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install -r requirements.txt

            # Download the published test artifacts - this is needed for test infra
            - uses: actions/download-artifact@v4
              with:
                  name: tests-published-${{ matrix.config }}
                  path: ./src/Python/src/tableau_migration/bin/
            
            # Lint with ruff
            - name: Lint with ruff
              run: python -m hatch run lint:lint
            
            # Test with pytest
            - name: Test with pytest
              run: python -m hatch --data-dir=.hatch --cache-dir=.hatch_cache run test:testcov

            # Build code coverage reports
            - name: Build Coverage Summary
              run: dotnet reportgenerator -reports:"TestResults/coverage*.xml" -targetdir:"TestResults/coverage-reports" -reporttypes:"Html;MarkdownSummaryGithub"

            # Create job summary
            - name: Set Job Summary
              run: cat "TestResults/coverage-reports/SummaryGithub.md" >> $GITHUB_STEP_SUMMARY
              shell: bash

            # Upload test results
            - name: Upload Test Results
              # Use always() to always run this step to publish test results when there are test failures
              if: ${{ always() }}
              uses: actions/upload-artifact@v4
              with:
                  name: python-example-test-results-${{ matrix.os }}-${{ matrix.config }}
                  path: ./tests/Python.ExampleApplication.Tests/TestResults
                  if-no-files-found: error
